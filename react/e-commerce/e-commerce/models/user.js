const mongoose = require('mongoose');
// crypto will hash the password
const crypto = require('crypto');
// uuid is used to generate unique strings
const uuidv1 = require('uuid/v1');

const userSchema = new mongoose.Schema(
    {
        name: {
            type: String,
            trim: true,
            required: true,
            maxlength: 32
        },
        email: {
            type: String,
            trim: true,
            required: true,
            unique: true
        },
        // This field will not store password but the hashed version of it
        hashed_password: {
            type: String,
            required: true
        },
        about: {
            type: String,
            trim: true
        },
        // The salt will be a long string which will be generated by uuidv1
        salt: String,
        // 0 will be standard user and 1 will be admin user
        role: {
            type: Number,
            default: 0
        },
        history: {
            type: Array,
            default: []
        }
    },
    { timestamps: true }
);

// With Mongoose schema virtual fields, methods and so on can be added

// virtual field
userSchema
    // password will be received from the client side
    .virtual("password")
    .set(function(password) {
        // this._password will only exist while the execution of the virtual field happens
        this._password = password;
        // uuid will generate a random string and it's value will be used to hash the password
        this.salt = uuidv1();
        this.hashed_password = this.encryptPassword(password);
    })
    .get(function() {
        return this._password;
    });

// methods
userSchema
    .methods = {
        authenticate: function(plainText) {
            // If values match it will return true
            return this.encryptPassword(plainText) === this.hashed_password;
        },

        encryptPassword: function(password) {
            if(!password) return '';
            try {
                return crypto
                    // https://nodejs.org/api/crypto.html#crypto_crypto
                    .createHmac("sha1", this.salt)
                    .update(password)
                    .digest("hex");
            } catch (err) {
                // If an error happens we return nothing
                return '';
            }
        }
    };

module.exports = mongoose.model('User', userSchema);